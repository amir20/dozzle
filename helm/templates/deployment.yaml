apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dozzle.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dozzle.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "dozzle.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "dozzle.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ .Values | toJson | sha256sum }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dozzle.serviceAccountName" . }}
      securityContext:
        {}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: DOZZLE_MODE
              value: "k8s"
            {{- range $key, $value := .Values.config }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: DOZZLE_MODE
              value: {{- if and (kindIs "map" .Values.config) (hasKey .Values.config "DOZZLE_REMOTE_AGENT") (ne .Values.config.DOZZLE_REMOTE_AGENT "") }} "server" {{ else }} "k8s" {{ end }}
            {{- if and (hasKey .Values.config "dozzle_remote_agent") (ne .Values.config.dozzle_remote_agent "") }}
            - name: DOZZLE_REMOTE_AGENT
              value: "{{ .Values.config.dozzle_remote_agent }}"
            {{- end }}
          {{- if .Values.auth.secret.existingSecret }}
          volumeMounts:
            - name: auth-config
              mountPath: "/data"
              readOnly: true
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.auth.secret.existingSecret }}
      volumes:
        - name: auth-config
          secret:
            secretName: {{ .Values.auth.secret.existingSecret }}
            items:
              - key: {{ .Values.auth.secret.key }}
                path: {{ .Values.auth.secret.key }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

