# Default values for dozzle.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: amir20/dozzle
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart's appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

rbac:
  # Specifies whether RBAC resources should be created.
  create: true
  # If true, a ClusterRole and ClusterRoleBinding will be created.
  # If false, a Role and RoleBinding will be created, scoped to the release namespace.
  clusterScoped: true

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: dozzle.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: dozzle-tls
  #    hosts:
  #      - dozzle.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Additional environment variables for the Dozzle container.
# See https://dozzle.dev/guide/supported-env-vars
config:
  # DOZZLE_MODE is fixed to k8s by the chart.
  DOZZLE_LEVEL: "info"
  # DOZZLE_FILTER: "label=foo"
  # DOZZLE_AUTH_PROVIDER: simple

# If using file-based auth, you can create a secret with your users.yml
# and mount it here.
auth:
  secret:
    # The name of an existing secret that contains the users.yml file.
    existingSecret: ""
    # The key in the secret that contains the users.yml content.
    key: "users.yml"