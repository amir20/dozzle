/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection ES6UnusedImports
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-resolver' {
  export type ParamParserCustom = never
}

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<
      '/',
      '/',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/[...all]': RouteRecordInfo<
      '/[...all]',
      '/:all(.*)',
      { all: ParamValue<true> },
      { all: ParamValue<false> },
      | never
    >,
    '/container/[id]': RouteRecordInfo<
      '/container/[id]',
      '/container/:id',
      { id: ParamValue<true> },
      { id: ParamValue<false> },
      | never
    >,
    '/container/[id].time.[datetime]': RouteRecordInfo<
      '/container/[id].time.[datetime]',
      '/container/:id/time/:datetime',
      { id: ParamValue<true>, datetime: ParamValue<true> },
      { id: ParamValue<false>, datetime: ParamValue<false> },
      | never
    >,
    '/group/[name]': RouteRecordInfo<
      '/group/[name]',
      '/group/:name',
      { name: ParamValue<true> },
      { name: ParamValue<false> },
      | never
    >,
    '/host/[id]': RouteRecordInfo<
      '/host/[id]',
      '/host/:id',
      { id: ParamValue<true> },
      { id: ParamValue<false> },
      | never
    >,
    '/login': RouteRecordInfo<
      '/login',
      '/login',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/merged/[ids]': RouteRecordInfo<
      '/merged/[ids]',
      '/merged/:ids',
      { ids: ParamValue<true> },
      { ids: ParamValue<false> },
      | never
    >,
    '/service/[name]': RouteRecordInfo<
      '/service/[name]',
      '/service/:name',
      { name: ParamValue<true> },
      { name: ParamValue<false> },
      | never
    >,
    '/settings': RouteRecordInfo<
      '/settings',
      '/settings',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/show': RouteRecordInfo<
      '/show',
      '/show',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/stack/[name]': RouteRecordInfo<
      '/stack/[name]',
      '/stack/:name',
      { name: ParamValue<true> },
      { name: ParamValue<false> },
      | never
    >,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'assets/pages/index.vue': {
      routes:
        | '/'
      views:
        | never
    }
    'assets/pages/[...all].vue': {
      routes:
        | '/[...all]'
      views:
        | never
    }
    'assets/pages/container/[id].vue': {
      routes:
        | '/container/[id]'
      views:
        | never
    }
    'assets/pages/container/[id].time.[datetime].vue': {
      routes:
        | '/container/[id].time.[datetime]'
      views:
        | never
    }
    'assets/pages/group/[name].vue': {
      routes:
        | '/group/[name]'
      views:
        | never
    }
    'assets/pages/host/[id].vue': {
      routes:
        | '/host/[id]'
      views:
        | never
    }
    'assets/pages/login.vue': {
      routes:
        | '/login'
      views:
        | never
    }
    'assets/pages/merged/[ids].vue': {
      routes:
        | '/merged/[ids]'
      views:
        | never
    }
    'assets/pages/service/[name].vue': {
      routes:
        | '/service/[name]'
      views:
        | never
    }
    'assets/pages/settings.vue': {
      routes:
        | '/settings'
      views:
        | never
    }
    'assets/pages/show.vue': {
      routes:
        | '/show'
      views:
        | never
    }
    'assets/pages/stack/[name].vue': {
      routes:
        | '/stack/[name]'
      views:
        | never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
